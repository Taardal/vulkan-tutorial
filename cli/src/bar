#include "App.h"
#include "Context.h"
#include "Environment.h"
#include "Help.h"
#include <sstream>
#include <exception>

namespace VulkandemoCLI
{
    App::App()
        : helpCommand(CreateHelpCommand())
    {
    }

    void App::Run(int argc, char* argv[])
    {
        // SETUP
        Commands.push_back(helpCommand);
        helpFlag.Name = "help";
        helpFlag.Aliases = {"h"};
        helpFlag.Usage = "Show help";
        Flags.push_back(helpFlag);

        // RUN
        const std::vector<std::string>& arguments = GetArguments(argc, argv);

        Context context;
        context.App = this;

        // Show help
        if (arguments.size() == 0)
        {
            helpCommand.Action(context);
            return;
        }
        if (arguments[0] == helpCommand.Name)
        {
            helpCommand.Action(context);
            return;
        }
        if (arguments[0] == helpFlag.NameWithPrefix())
        {
            helpCommand.Action(context);
            return;
        }

        std::vector<Flag> globalFlags;
        Command command;
        std::vector<Flag> commandFlags;
        std::vector<std::string> args;

        bool globalFlagsDone = false;
        bool commandsDone = false;
        bool commandFlagsDone = false;

        for (int i = 0; i < arguments.size(); i++)
        {
            const std::string& argument = arguments[i];
            const std::string& nextArgument = arguments.size() > i + 1 ? arguments[i + 1] : "";

            // GLOBAL OPTIONS / FLAGS
            if (!globalFlagsDone)
            {
                constexpr int longFormDashCount = 2;
                constexpr int shortFormDashCount = 1;

                bool longForm = argument.length() > longFormDashCount && argument.substr(0, longFormDashCount) == "--";
                bool shortForm = argument.length() > shortFormDashCount && argument.substr(0, shortFormDashCount) == "-";

                bool isFlag = longForm || shortForm;
                if (isFlag)
                {
                    Flag flag;
                    int dashCount = longForm ? longFormDashCount : shortFormDashCount;
                    int equalSignIndex = argument.find("=");
                    bool hasValueWithEquals = equalSignIndex != std::string::npos;
                    bool hasValueWithSpace = nextArgument.length() > 0 && nextArgument.substr(0, 1) != "-";
                    if (hasValueWithEquals)
                    {
                        flag.Name = argument.substr(dashCount, equalSignIndex - dashCount);
                        flag.Value = argument.substr(equalSignIndex + 1, argument.length());
                    }
                    else if (hasValueWithSpace)
                    {
                        flag.Name = argument.substr(dashCount, argument.length());
                        flag.Value = nextArgument;
                    }
                    else
                    {
                        flag.Name = argument.substr(dashCount, argument.length());
                    }
                    bool defined = false;
                    for (const Flag& f : Flags)
                    {
                        if (f.Name == flag.Name)
                        {
                            defined = true;
                            break;
                        }
                    }
                    if (defined)
                    {
                        globalFlags.push_back(flag);
                    }
                    else
                    {
                        throw std::runtime_error("big doo-doo");
                    }
                }
                else
                {
                    globalFlagsDone = true;
                }
            }

            // PARSE COMMANDS
            if (globalFlagsDone && globalFlags.empty() && !commandsDone)
            {
                if (command.Name.empty())
                {
                    constexpr int longFormDashCount = 2;
                    constexpr int shortFormDashCount = 1;

                    bool longForm = argument.length() > longFormDashCount && argument.substr(0, longFormDashCount) == "--";
                    bool shortForm = argument.length() > shortFormDashCount && argument.substr(0, shortFormDashCount) == "-";

                    bool isFlag = longForm || shortForm;
                    if (!isFlag)
                    {
                        for (const Command& appCommand : Commands)
                        {
                            if (argument == appCommand.Name)
                            {
                                command = appCommand;
                                break;
                            }
                            for (const std::string& appCommandAlias : appCommand.Aliases)
                            {
                                if (argument == appCommandAlias)
                                {
                                    command = appCommand;
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        commandsDone = true;
                    }
                }
                else
                {
                    commandsDone = true;
                }
            }

            // COMMAND OPTIONS / FLAGS
            if (commandsDone && !commandFlagsDone)
            {
                if (!command.Name.empty())
                {
                    constexpr int longFormDashCount = 2;
                    constexpr int shortFormDashCount = 1;

                    bool longForm = argument.length() > longFormDashCount && argument.substr(0, longFormDashCount) == "--";
                    bool shortForm = argument.length() > shortFormDashCount && argument.substr(0, shortFormDashCount) == "-";

                    bool isFlag = longForm || shortForm;
                    if (isFlag)
                    {
                        Flag flag;
                        int dashCount = longForm ? longFormDashCount : shortFormDashCount;
                        int equalSignIndex = argument.find("=");
                        bool hasValueWithEquals = equalSignIndex != std::string::npos;
                        bool hasValueWithSpace = nextArgument.length() > 0 && nextArgument.substr(0, 1) != "-";
                        if (hasValueWithEquals)
                        {
                            flag.Name = argument.substr(dashCount, equalSignIndex - dashCount);
                            flag.Value = argument.substr(equalSignIndex + 1, argument.length());
                        }
                        else if (hasValueWithSpace)
                        {
                            flag.Name = argument.substr(dashCount, argument.length());
                            flag.Value = nextArgument;
                        }
                        else
                        {
                            flag.Name = argument.substr(dashCount, argument.length());
                        }
                        commandFlags.push_back(flag);
                    }
                    else
                    {
                        commandFlagsDone = true;
                    }
                }
            }

            // ARGUMENTS
            if ((globalFlagsDone && !globalFlags.empty()) || (commandsDone && commandFlagsDone))
            {
                args.push_back(argument);
            }
        }

        context.GlobalFlags = globalFlags;
        context.Command = &command;
        context.CommandFlags = commandFlags;
        context.Args = args;

        if (command.Name.size() > 0)
        {
            command.Action(context);
            return;
        }
        Action(context);
    }

    std::vector<std::string> App::GetArguments(int argc, char* argv[]) const
    {
        std::vector<std::string> arguments;
        constexpr int firstArgumentIndex = 1;
        if (argc > firstArgumentIndex)
        {
            for (int i = firstArgumentIndex; i < argc; i++)
            {
                arguments.push_back(std::string(argv[i]));
            }
        }
        return arguments;
    }
}